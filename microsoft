def wordBreak(s, wordDict):
    word_set = set(wordDict)  # Convert wordDict to a set for O(1) lookups
    memo = {}  # Dictionary to store results for memoization
    
    def backtrack(start):
        # If we have reached the end of the string, return an empty list
        if start == len(s):
            return [""]
        
        if start in memo:
            return memo[start]
        
        result = []
        for end in range(start + 1, len(s) + 1):
            word = s[start:end]
            if word in word_set:
                # Recursively call backtrack for the remaining substring
                sub_sentences = backtrack(end)
                for sentence in sub_sentences:
                    # Append the current word to the sub-sentences
                    if sentence:
                        result.append(word + " " + sentence)
                    else:
                        result.append(word)
        
        memo[start] = result
        return result
    
    return backtrack(0)
